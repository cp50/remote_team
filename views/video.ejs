<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Call</title>
    
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #1e1e2f;
            color: white;
            margin: 0;
            padding: 0;
        }

        h2 { margin: 20px; font-size: 24px; }

        .room-controls {
            margin: 20px;
        }

        .room-controls input {
            padding: 10px;
            width: 200px;
            margin-right: 10px;
            border: none;
            border-radius: 5px;
        }

        .room-controls button {
            padding: 10px 15px;
            background: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }

        .video-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        video {
            width: 320px;
            height: 240px;
            border-radius: 10px;
            background-color: #000;
            object-fit: cover;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        }

        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .controls button {
            background-color: #007BFF;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 50px;
            margin: 0 10px;
            cursor: pointer;
        }

        .chat-container {
            position: fixed;
            top: 0;
            right: -300px;
            width: 300px;
            height: 100%;
            background: #2e2e3e;
            transition: 0.3s;
            display: flex;
            flex-direction: column;
        }

        .chat-header {
            padding: 10px;
            background: #007BFF;
            color: white;
            text-align: center;
        }

        .chat-messages {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            font-size: 14px;
        }

        .chat-input {
            display: flex;
            padding: 10px;
            background: #1e1e2f;
        }

        .chat-input input {
            flex: 1;
            padding: 10px;
            border: none;
            outline: none;
            background: #444;
            color: white;
        }

        .chat-input button {
            background: #007BFF;
            border: none;
            color: white;
            padding: 10px;
            cursor: pointer;
        }

        .chat-toggle {
            position: fixed;
            top: 20px;
            right: 20px;
            background: #007BFF;
            color: white;
            padding: 10px;
            border-radius: 5px;
            cursor: pointer;
            z-index: 1000;
        }
    </style>
</head>
<body>

    <h2>ðŸ”´ Room-Based Video Chat</h2>

    <div class="room-controls">
        <input type="text" id="roomInput" placeholder="Enter room ID">
        <button onclick="joinRoom()">Join Room</button>
        <button onclick="createRoom()">Create Room</button>
    </div>

    <div class="video-container">
        <video id="myVideo" autoplay muted></video>
        <div id="videoGrid"></div>
    </div>

    <div class="controls">
        <button id="muteAudioBtn"><i class="fas fa-microphone"></i> Mute Audio</button>
        <button id="muteVideoBtn"><i class="fas fa-video"></i> Turn Off Video</button>
        <button onclick="startScreenShare()"><i class="fas fa-desktop"></i> Share Screen</button>
    </div>

    <div class="chat-toggle" onclick="toggleChat()">ðŸ’¬ Chat</div>

    <div class="chat-container" id="chatContainer">
        <div class="chat-header">Chat</div>
        <div class="chat-messages" id="chatMessages"></div>
        <div class="chat-input">
            <input type="text" id="messageInput" placeholder="Type a message...">
            <button onclick="sendMessage()">Send</button>
        </div>
    </div>

    <script>
        const socket = io('/');
        const myPeer = new Peer();
        const videoGrid = document.getElementById('videoGrid');
        const myVideo = document.getElementById('myVideo');
        let myStream;
        let currentRoom = null;

        myPeer.on('open', id => {
            console.log(`ðŸŸ¢ Peer connected with ID: ${id}`);
        });

        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
            myStream = stream;
            myVideo.srcObject = stream;
            myVideo.play();

            myPeer.on('call', call => {
                call.answer(stream);
                const video = document.createElement('video');
                call.on('stream', userStream => {
                    video.srcObject = userStream;
                    video.play();
                    videoGrid.appendChild(video);
                });
            });

            socket.on('user-connected', userId => {
                console.log(`User connected: ${userId}`);
                connectToNewUser(userId, stream);
            });
        });

        function createRoom() {
            currentRoom = myPeer.id;
            document.getElementById("roomInput").value = currentRoom;
            alert(`Room created! Share this ID: ${currentRoom}`);
            socket.emit("create-room", currentRoom);
        }

        function joinRoom() {
            currentRoom = document.getElementById("roomInput").value.trim();
            if (currentRoom) {
                socket.emit("join-room", currentRoom, myPeer.id);
            } else {
                alert("Enter a valid room ID");
            }
        }

        function connectToNewUser(userId, stream) {
            const call = myPeer.call(userId, stream);
            const video = document.createElement('video');
            call.on('stream', userStream => {
                video.srcObject = userStream;
                video.play();
                videoGrid.appendChild(video);
            });
        }

        function toggleChat() {
            const chatContainer = document.getElementById('chatContainer');
            chatContainer.style.right = chatContainer.style.right === '0px' ? '-300px' : '0px';
        }

        function sendMessage() {
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value;
            if (message) {
                socket.emit("chat message", message);
                messageInput.value = "";
            }
        }

        socket.on("chat message", (message) => {
            const chatMessages = document.getElementById('chatMessages');
            const messageElement = document.createElement('div');
            messageElement.textContent = message;
            chatMessages.appendChild(messageElement);
        });
    </script>
</body>
</html>
