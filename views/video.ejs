<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Video Call</title>
    
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            background-color: #1e1e2f;
            color: white;
            margin: 0;
            padding: 0;
        }

        h2 { margin: 20px; font-size: 24px; }

        .room-controls {
            margin: 20px;
        }

        .room-controls input {
            padding: 10px;
            width: 200px;
            margin-right: 10px;
            border: none;
            border-radius: 5px;
        }

        .room-controls button {
            padding: 10px 15px;
            background: #007BFF;
            color: white;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }

        .video-container {
            display: flex;
            justify-content: center;
            flex-wrap: wrap;
            gap: 15px;
            margin-top: 20px;
        }

        video {
            width: 320px;
            height: 240px;
            border-radius: 10px;
            background-color: #000;
            object-fit: cover;
            box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.5);
        }

        .controls {
            display: flex;
            justify-content: center;
            margin-top: 20px;
        }

        .controls button {
            background-color: #007BFF;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 50px;
            margin: 0 10px;
            cursor: pointer;
        }

        #chatMessages {
            max-height: 200px;
            overflow-y: auto;
            text-align: left;
            padding: 10px;
            background: #333;
            border-radius: 5px;
            width: 60%;
            margin: auto;
            margin-top: 20px;
        }

        .message {
            padding: 5px;
            margin: 3px 0;
            background: #444;
            border-radius: 3px;
        }

        #summary-container {
            display: none;
            margin-top: 20px;
            padding: 10px;
            border: 1px solid #ccc;
            background: #f9f9f9;
            color: black;
            border-radius: 5px;
            width: 60%;
            margin: auto;
            text-align: left;
        }

        #summaryResult {
            font-size: 16px;
            font-weight: bold;
        }
    </style>
</head>
<body>

    <h2>üî¥ Room-Based Video Chat</h2>

    <div class="room-controls">
        <input type="text" id="roomInput" placeholder="Enter room ID">
        <button onclick="joinRoom()">Join Room</button>
        <button onclick="createRoom()">Create Room</button>
    </div>

    <div class="video-container">
        <video id="myVideo" autoplay muted></video>
        <div id="videoGrid"></div>
    </div>

    <div class="controls">
        <button id="muteAudioBtn" onclick="toggleAudio()"><i class="fas fa-microphone"></i> Mute Audio</button>
        <button id="muteVideoBtn" onclick="toggleVideo()"><i class="fas fa-video"></i> Turn Off Video</button>
        <button id="screenShareBtn" onclick="startScreenShare()"><i class="fas fa-desktop"></i> Share Screen</button>
        <button id="transcriptionBtn" onclick="toggleTranscription()"><i class="fas fa-microphone-alt"></i> Start Transcription</button>
        <button id="summarizeBtn" onclick="summarizeMeeting()"><i class="fas fa-file-alt"></i> Summarize</button>
    </div>

    <div id="chatMessages"></div>

    <!-- Summary Section -->
    <div id="summary-container">
        <h3>üìù AI Meeting Summary</h3>
        <div id="summaryResult">No summary available.</div>
    </div>

    <script>
        const socket = io('/');
        const myPeer = new Peer();
        const videoGrid = document.getElementById('videoGrid');
        const myVideo = document.getElementById('myVideo');
        let myStream;
        let currentRoom = null;

        myPeer.on('open', id => {
            console.log(`üü¢ Peer connected with ID: ${id}`);
        });

        navigator.mediaDevices.getUserMedia({ video: true, audio: true }).then(stream => {
            myStream = stream;
            myVideo.srcObject = stream;
            myVideo.play();

            myPeer.on('call', call => {
                call.answer(stream);
                const video = document.createElement('video');
                call.on('stream', userStream => {
                    video.srcObject = userStream;
                    video.play();
                    videoGrid.appendChild(video);
                });
            });

            socket.on('user-connected', userId => {
                connectToNewUser(userId, stream);
            });
        });

        function createRoom() {
            currentRoom = myPeer.id;
            document.getElementById("roomInput").value = currentRoom;
            alert(`Room created! Share this ID: ${currentRoom}`);
            socket.emit("create-room", currentRoom);
        }

        function joinRoom() {
            currentRoom = document.getElementById("roomInput").value.trim();
            if (currentRoom) {
                socket.emit("join-room", currentRoom, myPeer.id);
            } else {
                alert("Enter a valid room ID");
            }
        }

        function toggleAudio() {
            const audioTrack = myStream.getAudioTracks()[0];
            audioTrack.enabled = !audioTrack.enabled;
            document.getElementById("muteAudioBtn").innerHTML = audioTrack.enabled ? 
                '<i class="fas fa-microphone"></i> Mute Audio' : 
                '<i class="fas fa-microphone-slash"></i> Unmute Audio'
        }

        function toggleVideo() {
            const videoTrack = myStream.getVideoTracks()[0];
            videoTrack.enabled = !videoTrack.enabled;
            document.getElementById("muteVideoBtn").innerHTML = videoTrack.enabled ? 
                '<i class="fas fa-video"></i> Turn Off Video' : 
                '<i class="fas fa-video-slash"></i> Turn On Video';

        }

        function startScreenShare() {
            navigator.mediaDevices.getDisplayMedia({ video: true }).then(screenStream => {
                myStream.getVideoTracks()[0].stop();
                myStream = screenStream;
                myVideo.srcObject = screenStream;
            });
        }

let recognition;
let isTranscribing = false;
let fullTranscript = "";  // ‚úÖ Store the full transcript

if ("webkitSpeechRecognition" in window || "SpeechRecognition" in window) {
    recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
    recognition.continuous = true;
    recognition.lang = "en-US";

    recognition.onresult = (event) => {
        let transcript = event.results[event.results.length - 1][0].transcript.trim();
        fullTranscript += transcript + " "; // ‚úÖ Append to full transcript
        console.log("Captured Transcript:", fullTranscript); // ‚úÖ Debugging log
        document.getElementById("chatMessages").innerHTML += `<div class="message">üó£ ${transcript}</div>`;
    };

    function toggleTranscription() {
        isTranscribing = !isTranscribing;
        if (isTranscribing) {
            fullTranscript = ""; // ‚úÖ Reset transcript when starting
            recognition.start();
            document.getElementById("transcriptionBtn").innerHTML = '<i class="fas fa-stop"></i> Stop Transcription';
        } else {
            recognition.stop();
            document.getElementById("transcriptionBtn").innerHTML = '<i class="fas fa-microphone-alt"></i> Start Transcription';
        }
    }
}

// ‚úÖ Send transcript to the server for summarization
function summarizeMeeting() {
    if (!fullTranscript.trim()) {
        alert("No conversation data available for summarization.");
        return;
    }

    fetch('/summarize', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ transcript: fullTranscript })  // ‚úÖ Send transcript
    })
    .then(response => response.json())
    .then(data => {
        document.getElementById("summaryResult").textContent = data.summary || "No summary generated.";
        document.getElementById("summary-container").style.display = "block";
    })
    .catch(error => console.error('Error fetching summary:', error));
}

    </script>

</body>
</html>
